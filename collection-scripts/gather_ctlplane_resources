#!/bin/bash

# load shared functions and data when not sourced
if [[ -z "$DIR_NAME" ]]; then
    CALLED=1
    DIR_NAME=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
    source "${DIR_NAME}/common.sh"
fi


function rotated_logs_symlinks {
    [[ ${SOS_DECOMPRESS} -ne 1 ]] && return

    for filename_dest in "${NAMESPACE_PATH}"/*/pods/*; do
        # If file not found we get the glob string itself, so ignore it
        [ -e "$filename_dest" ] || continue
        if [[ $filename_dest =~ ${NAMESPACE_PATH}/([^/]+)/pods/(.*) ]]; then
            namespace="${BASH_REMATCH[1]}"
            podname="${BASH_REMATCH[2]}"

            # Some pods have no directory (eg: metallb-system_speaker-c8bxh_7c886529-fa9e-4357-afb2-2e712049b317/130c1942bd055c5b0b16ec19a7c03dca74fe7a48604091284b5868ce53eb1840.log)
            # Most have a directory with the container name within the pod
            for log_name in "${SOS_PATH_NODES}"/*/var/log/pods/"${namespace}_${podname}"_*/{*.log.*,*/*.log.*}; do
                # If file not found we get the glob string itself, so ignore it
                [ -e "$log_name" ] || continue
                # To avoid collisions on rotated log names among sos reports construct a new name:
                # [<container_name>.]<filename>.<nodename>.<logfile_extension>
                # For visual comfort when it's not a gz file we'll use a different pattern
                # [<container_name>.]<filename>.<logfile_extension>.<nodename>
                # That way we'll end up with:
                #    manager.1.log.20240624-185849.sosreport-crc-vlf7c-master-0.gz
                #    manager.1.log.20240624-191028.sosreport-crc-vlf7c-master-0
                if [[ $log_name =~ ${SOS_PATH_NODES}/([^/]+)/var/log/pods/[^/]+/(.*) ]]; then
                    nodename="${BASH_REMATCH[1]}"
                    basename=${BASH_REMATCH[2]//\//.}
                    if [[ "${basename##*.}" == 'gz' ]]; then
                        linkfile="${filename_dest}/logs/${basename%.*}.${nodename}.${basename##*.}"
                    else
                        linkfile="${filename_dest}/logs/${basename}.${nodename}"
                    fi
                    echo "Creating symlink ${linkfile} to ${log_name}"
                    ln -s "${log_name}" "${linkfile}"
                fi
            done
        fi
    done
}


function gather_ctlplane_resources {
    local NS="$1"
    # Only get resources if the namespace exists
    if ! check_namespace "${NS}"; then
        return
    fi

    # Get the view of the current namespace related resources, including pods
    mkdir -p "${NAMESPACE_PATH}"/"${NS}"
    run_bg /usr/bin/oc -n "${NS}" get all '>' "${NAMESPACE_PATH}/${NS}/all_resources.log"
    run_bg /usr/bin/oc -n "${NS}" get events --sort-by='.lastTimestamp' '>' "${NAMESPACE_PATH}/${NS}/events.log"
    run_bg /usr/bin/oc -n "${NS}" get pvc '>' "${NAMESPACE_PATH}/${NS}/pvc.log"
    run_bg /usr/bin/oc -n "${NS}" get network-attachment-definitions -o yaml '>' "${NAMESPACE_PATH}/${NS}/nad.log"

    # We make a single request to get lines in the form <pod> <container> <previous_log> <init_containers>
    # mark pods that are in Pending state (they won't have
    # a status.containerStatuses field) with a null container name
    data=$(oc -n "${NS}" get pods -o json | jq -r '
      .items[] |
      .metadata.name as $pod |
      (.status |
        (
          if has("initContainerStatuses") then .initContainerStatuses[] else empty end |
          "\($pod) \(.name) \(has("lastState") and (.lastState | has("terminated"))) true"
        ),
        (
          if has("containerStatuses") then .containerStatuses[] else empty end |
          "\($pod) \(.name) \(has("lastState") and (.lastState | has("terminated"))) false"
        )
      )
    ')
    while read -r pod container previous init; do
        pod_dir="${NAMESPACE_PATH}/${NS}/pods/${pod}"
        log_dir="${pod_dir}/logs"
        if [ ! -d "$log_dir" ]; then
            mkdir -p "$log_dir"
            # describe pod
            run_bg oc -n "$NS" describe pod "$pod" '>' "${pod_dir}/${pod}-describe"
        fi
        if [ -n "${container}" ] && [ "${container}" != "null"  ]; then
            echo "Dump logs for ${container} from ${pod} pod";
            run_bg oc -n "$NS" logs "$pod" -c "$container" '>' "${log_dir}/${container}.log"
        fi
        if [[ "$previous" == true ]]; then
            run_bg oc -n "$NS" logs "$pod" -c "$container" --previous '>' "${log_dir}/${container}-previous.log";
        fi
        if [[ "$init" == true ]]; then
            echo "Dump init container logs from ${pod} pod";
            initcontainers=$(oc -n "${NS}" get pod "${pod}" -o json | jq -r '.status.initContainerStatuses[]?.name')
            for initcontainer in ${initcontainers}; do
                run_bg oc -n "$NS" logs "$pod" -c "$initcontainer" '>' "${log_dir}/${initcontainer}.log"
            done
        fi
    done <<< "$data"

    # get the required resources
    # shellcheck disable=SC2154
    for r in "${resources[@]}"; do
        get_resources "$r" "$NS"
    done
}

if [[ $CALLED -eq 1 ]]; then
    NS="$1"
    if [ -z "$NS" ]; then
        echo "No namespace passed, using the default one"
        NS=openstack
    fi

    gather_ctlplane_resources "$NS"

    wait_bg
fi
